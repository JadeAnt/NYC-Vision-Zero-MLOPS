apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: train-model
spec:
  entrypoint: training-and-build
  volumeClaimTemplates:
    - metadata:
        name: repo-volume
      spec:
        accessModes: ["ReadWriteMany"]
        resources:
          requests:
            storage: 1Gi
  arguments:
    parameters:
      - name: ray-head-ip
      - name: mlflow-uri

  templates:
    - name: training-and-build
      steps:
        - - name: clone-repo
            template: clone-repo
        - - name: submit-ray-job
            template: submit-ray-job
            arguments:
              parameters:
                - name: ray-head-ip
                  value: '{{workflow.parameters.ray-head-ip}}'
        - - name: poll-ray-job
            template: poll-ray-job
            arguments:
              parameters:
                - name: ray-head-ip
                  value: '{{workflow.parameters.ray-head-ip}}'
                - name: job-id
                  value: '{{steps.submit-ray-job.outputs.result}}'
        - - name: query-mlflow
            template: query-mlflow
            arguments:
              parameters:
                - name: mlflow-uri
                  value: '{{workflow.parameters.mlflow-uri}}'
                - name: model-name
                  value: 'CrashModel'
        - - name: build-container
            template: trigger-build
            arguments:
              parameters:
                - name: model-version
                  value: '{{steps.query-mlflow.outputs.result}}'
            when: "{{steps.query-mlflow.outputs.result}} != ''"

    - name: clone-repo
      script:
        image: alpine/git
        command: [sh]
        source: |
          set -e
          git clone --branch main "https://github.com/JadeAnt/NYC-Vision-Zero-MLOPS.git" /mnt/repo-volume/repo
      volumeMounts:
        - name: repo-volume
          mountPath: /mnt/repo-volume

    - name: submit-ray-job
      inputs:
        parameters:
          - name: ray-head-ip
      script:
        image: python:3.10-slim
        command: [sh]      # changed [sh, -c] to [sh]  
        source: |
          set -e
          
          echo "[INFO] Contents of repo directory:"
          
          ls /mnt/repo-volume/repo
          
          echo "[INFO] Installing Ray CLI..."

          pip install --no-cache-dir "ray[default]" 

          echo "[INFO] Submitting job via Ray CLI..."

          JOB_ID=$(ray job submit \
            --address http://{{inputs.parameters.ray-head-ip}}:8265 \
            --working-dir /mnt/repo-volume/repo \
            --runtime-env-json='{
              "pip": ["ray[train]", "ray[tune]","torch","mlflow","scikit-learn","joblib", "prefect"]
              }'  \
            -- python /train/flow.py --epochs 10)

          if [ -z "$JOB_ID" ] || [ "$JOB_ID" = "null" ]; then
            echo "[ERROR] Ray CLI failed to return a job_id" >&2
            exit 1
          fi


          echo "$JOB_ID"
      volumeMounts:
        - name: repo-volume
          mountPath: /mnt/repo-volume

    - name: poll-ray-job
      inputs:
        parameters:
          - name: ray-head-ip
          - name: job-id
      script:
        image: curlimages/curl:8.2.1
        command: [sh, -c]
        source: |
          MAX_RETRIES=60
          SLEEP=10
          i=0

          while [ $i -lt $MAX_RETRIES ]; do
            STATUS=$(curl -s \
              http://{{inputs.parameters.ray-head-ip}}:8265/api/jobs/{{inputs.parameters.job-id}})

            echo "[INFO] Ray job status: $STATUS" >&2
            if [ "$STATUS" = "SUCCEEDED" ]; then
              exit 0
            elif [ "$STATUS" = "FAILED" ]; then
              echo "ERROR: Ray job failed" >&2
              exit 1
            fi

            i=$((i+1))
            sleep $SLEEP
          done

          echo "ERROR: Ray job did not complete after $((MAX_RETRIES * SLEEP)) seconds" >&2
          exit 1

    - name: query-mlflow
      inputs:
        parameters:
          - name: mlflow-uri
          - name: model-name
      script:
        image: curlimages/curl:8.2.1
        command: [sh, -c]
        source: |
          # Query MLflow Model Registry for the latest version of this model
          # Using the MLflow 2.0 REST API:
          RESPONSE=$(curl -s -X POST \
            {{inputs.parameters.mlflow-uri}}/api/2.0/mlflow/model-versions/search \
            -H "Content-Type: application/json" \
            -d "{\"filter\": \"name='{{inputs.parameters.model-name}}'\", \"page_size\":1}")

          VERSION=$(echo "$RESPONSE")

          if [ -z "$VERSION" ]; then
            echo "ERROR: could not find model version in MLflow registry" >&2
            exit 1
          fi

          echo -n "$VERSION"

    - name: trigger-build
      inputs:
        parameters:
          - name: model-version
      resource:
        action: create
        manifest: |
          apiVersion: argoproj.io/v1alpha1
          kind: Workflow
          metadata:
            generateName: build-container-image-
          spec:
            workflowTemplateRef:
              name: build-container-image
            arguments:
              parameters:
                - name: model-version
                  value: "{{inputs.parameters.model-version}}"
